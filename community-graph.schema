type Link {
    url: ID!
}

type User {
    id: ID!
    type: String
    repositories: [Repository] @relation(name:"CREATED")

    questions: [Question] @relation(name:"POSTED")
    answers: [Answer] @relation(name:"POSTED")
    reputation: Int
    
    screen_name: String!
    name: String
    location: String
    followers: Int
    following: Int
    statuses: Int
    profile_image_url: String
    posted: [Tweet] @relation(name:"POSTED")
    tagged: [Tag] @relation(name:"TAGGED")
}

type Tweet {
    id: ID!
    text: String
    created: Int
    favorites: Int
    postedBy: User @relation(name:"POSTED", direction:"IN")
    mentioned: [User] @relation(name:"MENTIONED")
    reply: Tweet @relation(name:"REPLIED_TO")
    retweeted: Tweet @relation(name:"RETWEETED")
}

type Tag {
    name: ID!
    tagged: [Tweet] @relation(name:"TAGGED", direction:"IN")
}

type Repository {
    title: String!
    full_name: String
    url: String
    created: Int
    homepage: String
    favorites: Int
    updated: Int
    pushed: Int
    size: Int
    score: Float
    watchers: Int
    language: String
    forks: Int
    open_issues: Int
    branch: String
    description: String
    owner: User @relation(name:"CREATED", direction: "IN")
}

type Question {
    id: ID!
    title: String
    link: String
    score: Int
    text: String

    closed_date: Int
    closed_reason: String

    comment_count: Int 
    favorites: Int
    view_count: Int
    comment_count: Int
    is_answered: Boolean 
    created: Int
    updated: Int
    answers: [Answer] @relation(name:"ANSWERED", direction:"IN")
    author: User @relation(name:"POSTED", direction:"IN")
    tags: [Tag] @relation(name:"TAGGED")
}

type Answer {
    id: ID!
    text: String 
    comment_count: Int
    is_accepted: Boolean
    created: Int
    score: Int
    question: Question @relation(name:"ANSWERED")
    author: User @relation(name:"POSTED", direction:"IN")
}